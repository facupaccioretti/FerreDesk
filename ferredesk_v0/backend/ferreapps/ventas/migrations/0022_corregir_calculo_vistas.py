# Generated by Django 5.0.1 on 2025-06-14 02:16

from django.db import migrations


class Migration(migrations.Migration):

    dependencies = [
        ('ventas', '0021_agregar_aliporce_a_vista_detalleitem'),
    ]

    operations = [
        migrations.RunSQL(
            sql="""
            -- Paso 1: Recrear VENTADETALLEITEM_CALCULADO para asegurar que los JOINS estén correctos
            -- y añadir cualquier campo nuevo si es necesario (como 'ali_porce' que se agregó recientemente).
            DROP VIEW IF EXISTS "VENTADETALLEITEM_CALCULADO";
            CREATE VIEW "VENTADETALLEITEM_CALCULADO" AS
            SELECT
                vdi."id" AS id,
                vdi."VDI_IDVE" AS vdi_idve,
                vdi."VDI_ORDEN" AS vdi_orden,
                vdi."VDI_IDSTO" AS vdi_idsto,
                vdi."VDI_IDPRO" AS vdi_idpro,
                vdi."VDI_CANTIDAD" AS vdi_cantidad,
                vdi."VDI_COSTO" AS vdi_costo,
                vdi."VDI_MARGEN" AS vdi_margen,
                vdi."VDI_BONIFICA" AS vdi_bonifica,
                vdi."VDI_DETALLE1" AS vdi_detalle1,
                vdi."VDI_DETALLE2" AS vdi_detalle2,
                vdi."VDI_IDALIIVA" AS vdi_idaliiva,
                sto."STO_CODVTA" AS codigo,
                sto."STO_UNIDAD" AS unidad,
                ali."ALI_PORCE" AS ali_porce,
                ROUND((vdi."VDI_COSTO" * (1 + vdi."VDI_MARGEN" / 100.0) * (1 - vdi."VDI_BONIFICA" / 100.0)), 2) AS vdi_importe,
                ROUND((vdi."VDI_COSTO" * (1 + vdi."VDI_MARGEN" / 100.0) * (1 - vdi."VDI_BONIFICA" / 100.0) * vdi."VDI_CANTIDAD"), 2) AS vdi_importe_total,
                ROUND(((vdi."VDI_COSTO" * (1 + vdi."VDI_MARGEN" / 100.0) * (1 - vdi."VDI_BONIFICA" / 100.0) * vdi."VDI_CANTIDAD") * (ali."ALI_PORCE" / 100.0)), 2) AS vdi_ivaitem
            FROM
                "VENTA_DETAITEM" vdi
                JOIN "ALICUOTASIVA" ali ON vdi."VDI_IDALIIVA" = ali."ALI_ID"
                JOIN "STOCK" sto ON vdi."VDI_IDSTO" = sto."STO_ID";

            -- Paso 2: Recrear VENTAIVA_ALICUOTA basándose en la vista de detalle actualizada.
            DROP VIEW IF EXISTS "VENTAIVA_ALICUOTA";
            CREATE VIEW "VENTAIVA_ALICUOTA" AS
            SELECT
                row_number() over () as id,
                vdi_idve,
                vdi_idaliiva,
                ROUND(SUM(vdi_ivaitem), 2) AS iva_total
            FROM
                "VENTADETALLEITEM_CALCULADO"
            GROUP BY vdi_idve, vdi_idaliiva;

            -- Paso 3: Recrear VENTA_CALCULADO con la lógica de pre-agregación para evitar el 'fan-out'.
            DROP VIEW IF EXISTS "VENTA_CALCULADO";
            CREATE VIEW "VENTA_CALCULADO" AS
            WITH SubtotalesPorVenta AS (
                SELECT
                    vdi_idve,
                    SUM(vdi_importe_total) as subtotal_bruto
                FROM "VENTADETALLEITEM_CALCULADO"
                GROUP BY vdi_idve
            ),
            IVAPorVenta AS (
                SELECT
                    vdi_idve,
                    SUM(iva_total) as iva_global
                FROM "VENTAIVA_ALICUOTA"
                GROUP BY vdi_idve
            )
            SELECT
                v."VEN_ID" AS ven_id,
                v."VEN_SUCURSAL" AS ven_sucursal,
                v."VEN_FECHA" AS ven_fecha,
                v."VEN_HORA_CREACION" AS hora_creacion,
                v."VEN_CODCOMPROB" AS comprobante_id,
                c."CBT_NOMBRE" AS comprobante_nombre,
                c."CBT_LETRA" AS comprobante_letra,
                c."CBT_TIPO" AS comprobante_tipo,
                c."CBT_CODIGO_AFIP" AS comprobante_codigo_afip,
                c."CBT_DESCRIPCION" AS comprobante_descripcion,
                c."CBT_ACTIVO" AS comprobante_activo,
                v."VEN_PUNTO" AS ven_punto,
                v."VEN_NUMERO" AS ven_numero,
                v."VEN_DESCU1" AS ven_descu1,
                v."VEN_DESCU2" AS ven_descu2,
                v."VEN_DESCU3" AS ven_descu3,
                v."VEN_VDOCOMVTA" AS ven_vdocomvta,
                v."VEN_VDOCOMCOB" AS ven_vdocomcob,
                v."VEN_ESTADO" AS ven_estado,
                v."VEN_IDCLI" AS ven_idcli,
                v."VEN_CUIT" AS ven_cuit,
                v."VEN_DOMICILIO" AS ven_domicilio,
                v."VEN_IDPLA" AS ven_idpla,
                v."VEN_IDVDO" AS ven_idvdo,
                v."VEN_COPIA" AS ven_copia,
                v."VEN_FECANULA" AS ven_fecanula,
                v."VEN_CAE" AS ven_cae,
                v."VEN_CAEVENCIMIENTO" AS ven_caevencimiento,
                v."VEN_QR" AS ven_qr,
                v."VEN_BONIFICACION_GENERAL" AS ven_bonificacion_general,
                ROUND(st.subtotal_bruto, 2) AS subtotal_bruto,
                ROUND(st.subtotal_bruto * (1 - v."VEN_DESCU1" / 100.0) * (1 - v."VEN_DESCU2" / 100.0), 2) AS ven_impneto,
                ROUND(COALESCE(iv.iva_global, 0), 2) AS iva_global,
                ROUND((st.subtotal_bruto * (1 - v."VEN_DESCU1" / 100.0) * (1 - v."VEN_DESCU2" / 100.0)) + COALESCE(iv.iva_global, 0), 2) AS ven_total
            FROM
                "VENTA" v
                JOIN SubtotalesPorVenta st ON st.vdi_idve = v."VEN_ID"
                LEFT JOIN IVAPorVenta iv ON iv.vdi_idve = v."VEN_ID"
                LEFT JOIN "COMPROBANTES" c ON v."VEN_CODCOMPROB" = c."CBT_CODIGO_AFIP";
            """,
            reverse_sql="""
            -- Para revertir, simplemente eliminamos las vistas. 
            -- Django aplicará la versión anterior de las vistas de la migración '0021' si se hace un 'migrate' hacia atrás.
            DROP VIEW IF EXISTS "VENTA_CALCULADO";
            DROP VIEW IF EXISTS "VENTAIVA_ALICUOTA";
            DROP VIEW IF EXISTS "VENTADETALLEITEM_CALCULADO";
            """
        ),
    ]
